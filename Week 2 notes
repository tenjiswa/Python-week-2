ANATOMY OF A FUNCTION
FUNCTION
Functions are composed of a name and parameters, which are denoted by the def statement.So, to create a function, let's call it performOperation and include num1, num2, and operation as parameters.
EXAMPLE
import math

def performOperation(num1,num2,operation):

    if operation== 'sum':
        return num1 + num2

    if operation== 'multiply':
        return num1 * num2

division = performOperation(2,3,'sum')

NAMED PARAMETERS
For instance, let's add another keyword argument, "message", to our function. Specify a default message that will be printed out when the function is called.
When calling the function, pass in the message before or after the operation, as long as we specify which argument is which by using a comma to separate them.

def performOperation(num1,num2,operation='sum',message='Default message'):
 print(message)
 if operation=='sum':
    return num1 + num2
 if operation=='multiply':
    return num1*num2
division =performOperation(2,3,message='A new message!',operation='multiply')
print(division)

*ARGS
There is a rule when using keyword arguments in Python i.e. they must come after the positional arguments.The order of the first two arguments is important and cannot be changed.
However, after these mandatory arguments, the keyword arguments can be in any order. 

import math
def perfomOperation(*args):
 print(args)
performOperation(1,2,3)
performOperation(1,2,3,operation='sum')

**KWARGS
In order to handle keyword arguments, a method called kwargs can be used. Kwags is short for keyword arguments.Print kwargs to see that the keyword arguments are now stored as a dictionary instead of a tuple.
This makes sense because keyword arguments have keys and values and can be passed in any order, so a dictionary is a more appropriate data structure for referencing them.

def performOperation(*args,**kwargs):
 print(args)
 print(kwargs)
Operation= performOperation(1,2,3,operation='sum')

def performOperation(*args,operation='sum'):
 if operation=='sum':
  return(args)
  if operation=='multiply':
   return(math.pro(args))
  performOperation(1,2,3,6,7,8 operation='sum')

VARIABLES AND SCOOP
FUNCTION SCOOPE-*args and **kwargs were used to print out the arguments passed into a function. This allowed us to see a tuple and dictionary of the passed arguments.  
However, there's another method that allows us to access all the variables within a Python function without any asterisks. This method is called the "locals" function.

def performOperation(*args,**kwargs):
 print(args)
 print(kwargs)
Operation= performOperation(1,2,3,operation='sum')

LOCALS
A variable created inside a function belongs to the local scope of that function, and can only be used inside that function.
In Python, there are two types of variables: local variables, which are defined inside the function, and global variables, which are defined outside the function in the main code block.

EXAMPLE
The local variable can be accessed from a function within the function:

def myfunc():
  x = 300
  def myinnerfunc():
    print(x)
  myinnerfunc()

myfunc()

import math

def performOperation(num1,num2,operation='sum'):
 print(locals())
performOperation(1,2,operation='multiply')
print(num1)

GLOBAL
A variable created in the main body of the Python code is a global variable and belongs to the global scope.Global variables are available from within any scope, global and local.

EXAMPLE
A variable created outside of a function is global and can be used by anyone:

x = 300

def myfunc():
  print(x)
myfunc()
print(x)

GLOBALS AND LOCAL SCOPES
If you operate with the same variable name inside and outside of a function, Python will treat them as two separate variables,

Example
The function will print the local x, and then the code will print the global x:
print(x)ne available in the global scope (outside the function) and one available in the local scope (inside the function):

x = 300

def myfunc():
  x = 200
  print(x)

myfunc()



FUNCTIONS AS VARIABLES
#Variables as Functions
Variables and functions both have names and data associated with them. However, for functions, this data includes information about required parameters and the lines of instruction to be executed.
x=5
def x():
 return s

VIEWING FUNCTION DATA WITH _CODE_

The "code" attribute of Python function objects can be used to confirm that functions are just variables in Python.
Print the variable names and the byte object of all the lines of instruction in a function using this attribute.
print(x._code_.co_varnames)
print(x._code_.code)

TEXT PROCESSING IN PYTHON
There are two text processing operations, and a function that can make the text lowercase,remove punctuation, new lines, and words that are three characters or less. 
It can also remove long words. By calling these functions in a list, the order can be changed or decide which functions to apply.

def lowercase(text):
 return text.lower()\
    
def removePunctuation(text):
    punctuation=[',','-',',''*']
 for punctuation in punctuations:
    text=text.replace(punctuation)
 return text
    
def removeNewline(text):
    text=text.replace('/n,'')
 return text

def removeShortWords(text):
 return''.join[word for word in text.split()if len(word)>3]

def removeLongWords(text):
 return''.join[word for word in text.split()if len(word)<6]
    


